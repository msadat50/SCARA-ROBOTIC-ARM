import time
import board
import digitalio
import simpleio
from adafruit_motor import stepper
from analogio import AnalogIn


DELAY = 0.02
STEPS = 5000
step = 0
step2 = 0

coils = (
    digitalio.DigitalInOut(board.D4),  # A1
    digitalio.DigitalInOut(board.D5),  # A2
    digitalio.DigitalInOut(board.D6),  # B1
    digitalio.DigitalInOut(board.D7),  # B2
)

coils2 = (
    digitalio.DigitalInOut(board.D8),  # A1
    digitalio.DigitalInOut(board.D9),  # A2
    digitalio.DigitalInOut(board.D10),  # B1
    digitalio.DigitalInOut(board.D11),  # B2
)
potentiometer1 = AnalogIn(board.A1)  # potentiometer connected to A1, power & ground
potentiometer2 = AnalogIn(board.A2)  # potentiometer connected to A2, power & ground

for coil in coils:
    coil.direction = digitalio.Direction.OUTPUT
for coil in coils2:
    coil.direction = digitalio.Direction.OUTPUT
motor = stepper.StepperMotor(coils[0], coils[1], coils[2], coils[3], microsteps=None)
motor2 = stepper.StepperMotor(coils2[0], coils2[1], coils2[2], coils2[3], microsteps=None)

while True:
    potValue = potentiometer1.value
    potValue2 = potentiometer2.value
    
    angle = int(simpleio.map_range(potValue, 0, 65535, 0, 200))
    print((angle))  # Display value (0-65535)
    angle2 = int(simpleio.map_range(potValue2, 0, 65535, 0, 200))
    print((angle2))  # Display value (0-65535)

    # read a potentiometer input, if input is > or < x :
    # move the stepper back or forward depending on if pot value is more or less than +/-1 of the stepper value (stepper onstep backwards), but DONT change the "step" value.

    if angle-1 > step:
        for step in range(step, angle, 1):
            motor.onestep()
            time.sleep(DELAY)
            print("motor1:", step)

    if angle+1 < step:
        for step in range(step, angle, -1):
            motor.onestep(direction=stepper.BACKWARD)
            time.sleep(DELAY)
            print("motor1:", step)

    if angle is step:
        motor.release()

  
    if angle2-1 > step2:
        for step2 in range(step2, angle2, 1):
            motor2.onestep()
            time.sleep(DELAY)
            print("motor2:", step2)

    if angle2+1 < step2:
        for step2 in range(step2, angle2, -1):
            motor2.onestep(direction=stepper.BACKWARD)
            time.sleep(DELAY)
            print("motor2:", step2)

    if angle2 is step:
        motor2.release()

    time.sleep(.1)
